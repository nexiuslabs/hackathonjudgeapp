-- Migration: Add judge_profiles, pin_verification_attempts, and auth_event_logs tables
-- Provides storage for PIN authentication metadata and rate limiting support.

create extension if not exists "pgcrypto";

create table if not exists public.judge_profiles (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references auth.users(id) on delete cascade,
  email text not null,
  event_id uuid not null,
  pin_hash text not null,
  pin_salt text not null,
  pin_valid_until timestamptz,
  requires_reset boolean not null default false,
  failed_attempts integer not null default 0,
  last_attempt_at timestamptz,
  created_at timestamptz not null default timezone('utc', now()),
  updated_at timestamptz not null default timezone('utc', now()),
  unique (email, event_id)
);

create index if not exists judge_profiles_user_id_idx on public.judge_profiles (user_id);
create index if not exists judge_profiles_event_id_idx on public.judge_profiles (event_id);

create table if not exists public.pin_verification_attempts (
  id bigint generated by default as identity primary key,
  email text not null,
  event_id uuid,
  success boolean not null,
  message text,
  ip_address text,
  user_agent text,
  attempted_at timestamptz not null default timezone('utc', now())
);

create index if not exists pin_attempts_email_attempted_at_idx
  on public.pin_verification_attempts (email, attempted_at desc);

create index if not exists pin_attempts_event_attempted_at_idx
  on public.pin_verification_attempts (event_id, attempted_at desc)
  where event_id is not null;

create table if not exists public.auth_event_logs (
  id bigint generated by default as identity primary key,
  type text not null,
  detail text,
  email text,
  created_at timestamptz not null default timezone('utc', now())
);

create index if not exists auth_event_logs_type_created_idx
  on public.auth_event_logs (type, created_at desc);

create or replace function public.handle_judge_profiles_updated_at()
returns trigger as $$
begin
  new.updated_at = timezone('utc', now());
  return new;
end;
$$ language plpgsql;

create trigger set_judge_profiles_updated_at
  before update on public.judge_profiles
  for each row execute function public.handle_judge_profiles_updated_at();
